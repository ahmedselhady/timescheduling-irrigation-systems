import streamlit as st
from copy import copy
from tqdm import tqdm
import pandas as pd
import math
from itertools import chain
import streamlit_ext as ste
import io

from constants import network_type_map
from st_aggrid import AgGrid, GridOptionsBuilder, JsCode

from utils import Utils as ut


    


st.set_page_config(page_title="Time Scheduling", layout="wide")


data_frames = []

form_app = st.form("GPM Valve Grouping Algorithm")

with form_app:

    st.write("Configurations:")

    uploaded_file = st.file_uploader("Choose a file")
    pump_unit_estimated_gpm = st.number_input("Pump Unit Estimated GPM")

    ctrl_pannel_type = st.radio(
        "Control Board Type",
        ["Standard", "IVM", "IVMP", "Not Applicable"],
        captions=[
            "5 valves/ctrl",
            "12 valves/ctrl",
            "16 valves/ctrl",
            ":infinity: valves/ctrl",
        ],
        horizontal=True,
    )

    submitted = st.form_submit_button("Calculate")

    if submitted:

        total_number_of_batches = 0

        st.divider()

        #* Make Summary pannel
        placeholder_cols = st.columns(4)
        total_num_batches_placeholder = placeholder_cols[0].empty()
        pump_type_placeholder = placeholder_cols[1].empty()
        avg_batch_gpm = placeholder_cols[2].empty()
        dummy = placeholder_cols[3].empty()

        st.divider()

        if len(data_frames) > 0:
            for x in data_frames:
                del x
            data_frames = []

        if uploaded_file is not None and pump_unit_estimated_gpm is not None:

            data = ut.read_datafile_as_dataframe(uploaded_file)
            
            pump_type, pump_type_name = ut.get_pump_type(data, pump_unit_estimated_gpm)
            #per_pump_gpm = pump_unit_estimated_gpm / pump_type
            pump_type_placeholder.metric(label="Pump Type", value=pump_type_name)

            valve_type_keys = data.valve_type_key.unique().tolist()

            for key in valve_type_keys:

                per_key_valves = data.loc[data["valve_type_key"] == key][
                    ["Valve", "gpm_int", "gpm"]
                ]
            
                df = get_groups(per_key_valves)

                column_keys = {k for x in df for k in x.keys()}
                controller_cell_spans = {
                    k: max([len(x[k]) if k in x else 0 for x in df])
                    for k in column_keys
                }

                headers = "Batch ID, # Valves / Batch, Total Batch GPM, " + ", ".join(
                    f"Controller {key}" + "," * (controller_cell_spans[key] - 1)
                    for key in sorted(column_keys)
                )
                dataframe_lines = [headers]

                for idx, group in enumerate(df):

                    flattened = list((chain.from_iterable(group.values())))

                    total_gpm = "{:5.3f}".format(sum([f_[-1] for f_ in flattened]))
                    names_line = f"Batch #{idx+1}, {len(flattened)}, { total_gpm }, "
                    values_line = f", , , "
                    for key in sorted(column_keys):

                        group_vals = group.get(key, [])
                        names_line += ", ".join([gv[0] for gv in group_vals])

                        padding = "," * (
                            controller_cell_spans[key] - len(group_vals) + 1
                        )
                        names_line += padding

                        values_line += ", ".join(
                            ["{:5.3f}".format(gv[-1]) for gv in group_vals]
                        )
                        values_line += padding
                        ##* correction step:
                        if values_line.strip()[-1] != ",":
                            values_line += ", "
                        if names_line.strip()[-1] != ",":
                            names_line += ", "
                    dataframe_lines.append(names_line)
                    dataframe_lines.append(values_line)

                total_number_of_batches += idx + 1
                dataframe_lines_ = [x.split(",") for x in dataframe_lines]

                max_width = max([len(x_) for x_ in dataframe_lines_])

                total_num_batches_placeholder.metric(
                    label="Total Number of Batches", value=total_number_of_batches
                )

                dataframe_lines_.append([] * max_width)
                dataframe_lines_.append([] * max_width)
                # dataframe_lines_.append( []*max_width )

                df = pd.DataFrame.from_records(
                    dataframe_lines_,
                    columns=[num_to_col(i_ + 1) for i_ in range(max_width)],
                )

                builder = GridOptionsBuilder.from_dataframe(df)

                ##* prepare column span values:
                controller_cell_spans_string = ",".join(
                    [f"'{k_}':{str(v_)}" for k_, v_ in controller_cell_spans.items()]
                )

                controller_cell_spans_string = "{" + controller_cell_spans_string + " }"

                for key in df.columns:

                    configs = {
                        "field": key,
                        "minWidth": 5,
                    }
                    if key in ["A", "B", "C"]:
                        configs["pinned"] = "left"
                        configs["width"] = 110
                        configs["wrapText"] = True
                        configs["autoHeight"] = True

                    if key == "A":
                        rowspan_function = f"""
                                function(params) {{
                                    if (typeof params.data.A === "string" && params.data.A.includes("Batch #")) {{
                                        return 2
                                    }} else {{
                                        return 1
                                    }}
                                }};
                            """

                        configs["rowSpan"] = JsCode(rowspan_function)

                        configs["cellStyle"] = {
                            "color": "black",
                            "background-color": "#4ADEDE",
                        }

                    elif key == "B":
                        rowspan_function = f"""
                                function(params) {{
                                    if (!isNaN(params.data.B)) {{
                                        return 2
                                    }} else {{
                                        return 1
                                    }}
                                }};
                            """

                        # configs['rowSpan'] = JsCode(rowspan_function)

                        configs["cellStyle"] = {
                            "color": "black",
                            "background-color": "#797ef6",
                        }

                    elif key == "C":

                        configs["cellStyle"] = {
                            "color": "black",
                            "background-color": "#1aa7ec",
                        }

                    else:
                        configs["cellStyle"] = JsCode(
                            f"""
                                function(params) {{
                                    if (isNaN(params.data.{key}) && typeof params.data.{key} === "string" && !params.data.{key}.includes("Controller")) {{
                                        return {{ 'color': 'black', 'font-weight':'bold', 'background-color': 'lightblue'}}
                                    }} else {{
                                        return {{ 'color': 'black'}}
                                    }}
                                }};
                            """
                        )

                        #

                    colspan_function = f"""
                                function(params) {{
                                    if (typeof params.data.{key} === "string" && params.data.{key}.includes("Controller")) {{
                                        let d_ = {controller_cell_spans_string};
                                        let parts = params.data.{key}.split(" ");
                                        let k_ = parts[parts.length-1];
                                        return d_[k_];
                                    }} else {{
                                        return 1
                                    }}
                                }};
                            """

                    configs["colSpan"] = JsCode(colspan_function)

                    builder.configure_column(**configs)

                go = builder.build()

                rowstyle_code = JsCode(
                    """
                                function(params) {
                                    if (params.data.A === 'Batch ID') {
                                        return {
                                            "font-weight":"bold",
                                            "text-align": "center",
                                            'backgroundColor': 'grey',
                                            'color': 'black',
                                            'font-size': "large"
                                        }
                                    }
                                };
                                """
                )

                go["getRowStyle"] = rowstyle_code

                st.subheader(
                    f'{ network_type_map.get(key, key)} Network, total GPM = {  "{:.3f}".format(per_key_valves["gpm"].sum())}, number of valves = {len(per_key_valves["gpm"])}',
                    divider="rainbow",
                )
                grid_return = AgGrid(df, gridOptions=go, allow_unsafe_jscode=True)
                new_df = grid_return["data"]
                data_frames.append(new_df)
                st.divider()





if len(data_frames) > 0:

    csv = pd.concat(data_frames)
    ste.download_button(
        label="Export groups data as Excel",
        data=ut.to_excel(csv),
        file_name="schedule.xlsx",
        mime="application/vnd.ms-excel",
    )
